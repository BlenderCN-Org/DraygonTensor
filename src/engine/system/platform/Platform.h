#pragma once

#include <SDL2/SDL.h>

#include "engine/system/ISystem.h"
#include "engine/system/platform/Keyboard.h"
#include "engine/system/platform/Video.h"

namespace ds
{
/**
 * Class used to initialize the current platform, query it for events and shut
 * it down.
 *
 * The Platform class takes events generated by the platform and converts them
 * into a platform-independent format (the MessageStream).
 */
class Platform : public ISystem
{
public:
    /**
     * Initialize the platform class and the method used to get information from
     * the user's hardware.
     *
     * @param   config  const Config &, configuration loaded by the engine.
     * @return          bool, TRUE if initialization succeeds, FALSE otherwise.
     */
    virtual bool Initialize(const Config &config);

    /**
     * Poll the platform for events.
     *
     * @param  deltaTime  float, timestep to update over.
     */
    virtual void Update(float deltaTime);

    /**
     * Shutdown the system.
     */
    virtual void Shutdown();

    /**
     * Give messages to the platform.
     *
     * Messages are not handled in this method. Handling of events is deferred
     * to the Update method.
     *
     * @param  messages  const ds_msg::MessageStream &messages, messages to send
     * to the Message Bus.
     */
    virtual void PostMessages(const ds_msg::MessageStream &messages);

    /**
     * Collect messages generated by the platform.
     *
     * @return  ds_msg::MessageStream, stream of messages generated by this
     * system.
     */
    virtual ds_msg::MessageStream CollectMessages();

    /**
     * @copydoc ISystem::GetName()
     */
    virtual const char *GetName() const;

    /**
     * Get the number of milliseconds since the platform has been initialized.
     *
     * @return  uint32_t, number of milliseconds since the platform has been
     * initialized.
     */
    uint32_t GetTicks() const;

    uint32_t GetRefreshRate() const;

private:
    /**
     * Translate an SDL2 event into a message and append it to the list of
     * messages generated by this system.
     *
     * @param  event  SDL_Event, SDL2 event to append to the event stream.
     */
    void AppendSDL2EventToGeneratedMessages(SDL_Event event);

    /**
     * Convert an SDL2 key state to an API-independent representation.
     *
     * @param   state  uint8_t, SDL2 key state.
     * @return         ds_platform::Keyboard::State, engine keyboard state
     * representation.
     */
    ds_platform::Keyboard::State
    ConvertSDL2KeyStateToPlatformKeyState(uint8_t state) const;

    /**
     * Convert an SDL2 key to an API-independent representation.
     *
     * @param   state  uint8_t, SDL2 key.
     * @return         ds_platform::Keyboard::State, engine key representation.
     */
    ds_platform::Keyboard::Key
    ConvertSDL2KeyToPlatformKey(SDL_Keycode keyCode) const;

    /**
     * Process messages in the given message stream.
     *
     * @param  ds_msg::MessageStream *, messages to process.
     */
    void ProcessEvents(ds_msg::MessageStream *messages);

    /**
     * Toggle the receiving of text input events from the operating system.
     */
    void ToggleTextInput() const;

    /**
     * Convert an SDL2 mouse button state to an API-independent representation.
     *
     * @param   state  uint32_t, SDL2 mouse button state
     * @return         ds_platform::Mouse::ButtonState, engine mouse button
     * state representation.
     */
    ds_platform::Mouse::ButtonState
    ConvertSDL2ButtonStateToButtonState(uint32_t state) const;

    ds_platform::Video m_video;
    ds_msg::MessageStream m_messagesGenerated, m_messagesReceived;
};
}
