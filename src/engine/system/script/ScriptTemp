#include <cassert>
#include <cmath>
#include <iostream>

#include "engine/system/script/Script.h"
#include "engine/system/script/LuaEnvironment.h"
#include "math/Vector3.h"

namespace ds_lua
{
static int sin(lua_State *L)
{
    double d = luaL_checknumber(L, 1); // Get argument
    lua_pushnumber(L, sinf(d));        // Push result
    return 1;                          // Number of results
}

static int spawnUnit(lua_State *L)
{
    // Get number of arguments provided
    int n = lua_gettop(L);
    if (n != 1)
    {
        return luaL_error(L, "Got %d arguments, expected 1.", n);
    }

    const char *unitFile = luaL_checklstring(L, 1, NULL);

    // Push script system pointer to stack
    lua_getglobal(L, "Script");

    // If first item on stack isn't user data (our script system)
    if (!lua_isuserdata(L, -1))
    {
        // Error
        luaL_argerror(L, 1, "lightuserdata");
    }
    else
    {
        ds::Script *p = (ds::Script *)lua_touserdata(L, -1);

        assert(p != NULL &&
               "spawnUnit: Tried to deference userdata pointer which was null");

        p->SpawnUnit(unitFile);
    }

    // Pop arguments
    lua_pop(L, 1);
    // Pop script system pointer
    lua_pop(L, 1);

    // Ensure stack is clean
    assert(lua_gettop(L) == 0);

    return 0;
}

static int LVector3New(lua_State *L)
{
    // Get number of arguments provided
    int n = lua_gettop(L);
    if (n != 3)
    {
        return luaL_error(L, "Got %d arguments, expected 3.", n);
    }

    // Allocate memory for Vector3
    ds_math::Vector3 *v =
        (ds_math::Vector3 *)lua_newuserdata(L, sizeof(ds_math::Vector3));

    ds_math::scalar x = (ds_math::scalar)luaL_checknumber(L, 1);
    ds_math::scalar y = (ds_math::scalar)luaL_checknumber(L, 2);
    ds_math::scalar z = (ds_math::scalar)luaL_checknumber(L, 3);

    *v = ds_math::Vector3(x, y, z);

    // Get Vector3 metatable
    luaL_getmetatable(L, "Vector3");
    // Set it as metatable of new user data (the Vector3)
    lua_setmetatable(L, -2);

    std::cout << "Called: " << *v << std::endl;

    // x, y, z values and Vector3
    assert(lua_gettop(L) == 4);

    return 1;
}

static int WhyWork(lua_State *L)
{
    std::cout << "Do I work?" << std::endl;

    return 0;
}

static const luaL_Reg vector3Methods[] = {{"new", LVector3New}};

static const luaL_Reg vector3MetaMethods[] = {{"__gc", WhyWork}};

void LoadAPI(LuaEnvironment &luaEnv)
{
    luaEnv.RegisterCFunction("World.spawn_unit", spawnUnit);

    luaEnv.RegisterClass("Vector3", vector3MetaMethods, vector3Methods);
}
}
