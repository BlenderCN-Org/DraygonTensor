#pragma once

#include <string>
#include <sstream>

#include "engine/system/ISystem.h"

namespace ds
{
/**
 * The console system simply collects all messages sent from the engine and
 * other systems and prints them to a console window (eg. std::cout).
 *
 * The console system also takes input from the user, translates it into a
 * message and broadcasts that message to the engine and other systems.
 */
class Console : public ISystem
{
public:
    /**
     * Initialize the console system.
     *
     * Returns FALSE if initialization fails.
     *
     * @param   config  const Config &, configuration loaded by engine.
     * @return          bool, TRUE if initialization succeeds, FALSE otherwise.
     */
    virtual bool Initialize(const Config &config);

    /**
     * Update the console system over the given timestep.
     *
     * @param  deltaTime  float, timestep to update the system over.
     */
    virtual void Update(float deltaTime);

    /**
     * Perform teardown of the console system.
     */
    virtual void Shutdown();

    /**
     * Give messages to the console system.
     *
     * Messages are not handled in this method. Handling of events is deferred
     * to the Update method.
     *
     * @param  messages  const ds_msg::MessageStream &messages, messages to send
     * to the Message Bus.
     */
    virtual void PostMessages(const ds_msg::MessageStream &messages);

    /**
     * Collect messages generated by the console system.
     *
     * @return  ds_msg::MessageStream, stream of messages generated by this
     * system.
     */
    virtual ds_msg::MessageStream CollectMessages();

private:
    /**
     * Flush the consoles output buffer to output.
     */
    void Flush();

    /**
     * Process messages in the given message stream.
     *
     * @param  ds_msg::MessageStream *, messages to process.
     */
    void ProcessEvents(ds_msg::MessageStream *messages);

    ds_msg::MessageStream m_messagesGenerated, m_messagesReceived;
    // Output buffer
    std::stringstream m_buffer;
    // Input buffer - taking console commands (in our case - Lua code)
    std::string m_inputText;

    // Has the input console been opened
    bool m_isConsoleOpen;
};
}
