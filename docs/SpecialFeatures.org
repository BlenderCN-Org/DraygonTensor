* Special Features

** Cross-platform build system

At the beginning of the semester, it was determined that members of the
development team would like to develop on different platforms (Windows, OSX and
Linux). So it was important that we create a build system that allows each
member of the team to contribute to the project on their platform. We used CMake
for this purpose. CMake allows us to create one set of project files from which
Visual Studio, XCode and Makefile project files can be created.

These CMake project files have the name "CMakeLists.txt" and are responsible for
finding all dependecies for the project.

** Data-driven design

Our engine is almost completely data-driven. A list of aspects loaded from file
include:

- input
- meshes
- textures
- entity descriptions (known as prefab files)
- window properties (window size, resolution, fullscreen or not, etc.)
- shaders and shader properties
- scripts

Many of these objects are specified using our own file format, these file
formats are written in a simple json format, primarily so we an parse and edit
them easily.

At the start of the game, the engine looks for a file called 'config.json'. This
file can be used to define some engine parameters. An example 'config.json' is
listed below:

#+NAME: config.json
#+BEGIN_SRC json
{
    "Video": {
        "redBits": 8,
        "greenBits": 8,
        "blueBits": 8,
        "alphaBits": 8,
       
        "depthBits": 24,
        "stencilBits": 8,

        "fullscreen": false,
        "lockMouse": true,

        "width": 800,
        "height": 600,

        "title": "Physics",

        "renderer": "openGL",
        "majorVersion": 3,
        "minorVersion": 3,
        "profile": "core"
    },

    "Script": {
        "bootScript": "../assets/boot.lua"
    },

    "Input": [
        {
            "name": "Default",
            "bindings": [
                { "key": "`",      "msg": "console_toggle" },
                { "key": "w",      "msg": "move_forward"   },
                { "key": "s",      "msg": "move_backward"  },
                { "key": "a",      "msg": "strafe_left"    },
                { "key": "d",      "msg": "strafe_right"   }
            ]
        }
    ]
}
#+END_SRC

This particular file is setting some window properties, notifying the engine to
look for a boot Lua script ("bootScript") and setting some input bindings.

*** Scripts

An appropriate amount of the engine is exposed to Lua scripts we use to define
game logic.

A full list of the methods exposed to Lua can be found at the following website:

https://samdelion.github.io/DraygonTensor-api/

This website also includes small snippets for each method which explains how to
use that method.

Using Lua scripts to define game logic was extremely useful to us. Rather than
having to recompile the game every time we make a change, we can simply edit the
Lua script and re-run the executable. In future, we could simply press a key to
reload the Lua script and change the way the game is running.

The boot Lua script specified in the 'config.json' file is executed by the
engine on startup. If found in the Lua script, the 'init' and 'preinit'
functions are called. Each frame, the 'update' and 'render' functions are
called. At the shutdown of the engine, the Lua 'shutdown' method is called.

An example boot script is listed below:

#+NAME: boot.lua
#+BEGIN_SRC lua
function preinit()
  print("Script: preinit called!")

  cam = Script.spawn_prefab("player", Vector3(0, 0, 0))
  box = Script.spawn_prefab("box", Vector3(0, 6, -10))
end

function init()
  print("Script: init called!")
  Physics.add_plane(Vector3(0, 1, 0), 0)
end

function shutdown()
  print("Script: shutdown called!")
end

function update(deltaTime)
  local camOrientation = Quaternion.normalize(Script.get_local_orientation(cam))
  local mouseDeltaX, mouseDeltaY = Input.get_mouse_delta_xy()
  local yawDelta = Quaternion.create_from_axis_angle(Vector3.unit_y(), -mouseDeltaX * deltaTime)
  local pitchDelta = Quaternion.create_from_axis_angle(Vector3.unit_x(), -mouseDeltaY * deltaTime)
  camOrientation = (yawDelta * camOrientation * pitchDelta)
  Script.set_local_orientation(cam, Quaternion.normalize(camOrientation))

  local temp = Vector4.normalize(Vector4.transform(-Vector4.unit_z(), Matrix4.create_from_quaternion(camOrientation)))
  local camFwd = Vector3(temp:get_x(), temp:get_y(), temp:get_z())
  local temp = Vector4.normalize(Vector4.transform(Vector4.unit_y(), Matrix4.create_from_quaternion(camOrientation)))
  local camUp = Vector3(temp:get_x(), temp:get_y(), temp:get_z())
  local temp = Vector4.normalize(Vector4.transform(Vector4.unit_x(), Matrix4.create_from_quaternion(camOrientation)))
  local camRight = Vector3(temp:get_x(), temp:get_y(), temp:get_z())
 
  local wishDir = Vector3(0, 0, 0)
  if (Input.is_key_pressed("w")) then
    wishDir = wishDir + camFwd
  end
  if (Input.is_key_pressed("s")) then
    wishDir = wishDir - camFwd
  end
  if (Input.is_key_pressed("a")) then
    wishDir = wishDir - camRight
  end
  if (Input.is_key_pressed("d")) then
    wishDir = wishDir + camRight
  end

  if (Vector3.magnitude(wishDir) > 0) then
    wishDir = Vector3.normalize(wishDir)
    wishDir = wishDir * deltaTime * 10
  end

  Script.set_local_translation(cam, Script.get_local_translation(cam) + wishDir);

  -- -- Handle messages
  -- while Script.is_next_message() do
  --   local msg = Script.get_next_message()
  --   print(msg.type)
  -- end
end

function render()
  --print("Script: render called!")
end
#+END_SRC

The script is used to spawn objects, create physics objects, move the camera,
process user input, etc.

*** Shaders and Materials

Materials define the properties of the surface of an object. They are composed
of a shader, zero to many textures and zero to many parameters. An example
material file is included below:

#+NAME: test.material
#+BEGIN_SRC json
{
    "shader": "simple.shader",

    "textures": [
        {
            "name": "tex",
            "texture": "color_grid.texture"
        }
    ],

    "parameters": [
        { "name": "u_test",   "type": "int",   "value": 2 },
        { "name": "u_float",  "type": "float", "value": 0.84159 },
        { "name": "u_colour", "type": "vec4",  "value": [0.8, 0.0, 0.8, 0.5] },
        { "name": "u_pos",    "type": "vec3",  "value": [1.0, 0.0, 1.0] },
        { "name": "u_mat",    "type": "mat4",  "value": [1.0, 0.0, 0.0, 0.0,
                                                         0.0, 1.0, 0.0, 0.0,
                                                         0.0, 0.0, 1.0, 0.0,
                                                         0.0, 0.0, 0.0, 4.0] }
  ]
}
#+END_SRC

As you can see, a material consists of a shader file, which simply points to a
vertex and fragment shader, a number of textures, which point to .texture files
and a number of material parameters. These parameters simply map to uniforms in
the shader files. The "value" given is a default value, these parameters can bet
changed at run-time using the Lua API:

#+BEGIN_SRC lua
Script.set_material_parameter("test.material", "u_colour", "vec4", Vector4(1, 0, 0, 1))
#+END_SRC

This data-driven approach to object materials gives us great flexibility.

** Blender plugin

Because the engine is almost completely data-driven, we were able to write some
external tools to more easily produce the data we needed for our game. One of
the tools we used was Blender.

Blender exposes much of it's functionality via a Python scripting interface, we
developed a number of Python modules to add some additional functionality to
Blender.

*** The export script

We wrote a script that takes an entire scene in Blender and outputs it in a
format our game engine expects. A .prefab file is created for each object in the
scene and a .lua file is created which spawns each of these .prefab files. Also,
.material, .texture and .mesh files are outputted and any assets needed to run
the game are exported from Blender to the export location.

#+NAME: src/blender/addons/io_draygon/__init__.py
#+BEGIN_SRC python
...
def writeAll(context, folderpath, levelpath):

    # Open lua level file
    levelout = open(levelpath, 'w')
    levelname = os.path.splitext(os.path.split(levelpath)[1])[0]
    # Create level loading file
    levelout.write("function " + levelname + "(offset)\n")

    # For each object in the scene
    scene = bpy.context.scene
    for obj in scene.objects:
        if (obj.type == 'MESH'):
            ...
            # Output necessary data files
            reltexturepath = writeObjectTexture(obj, folderpath)
            relmaterialpath = writeObjectMaterial(obj, folderpath, reltexturepath)
            relmeshpath = writeObjectMesh(obj, folderpath)
            relprefabpath = writePrefab(obj, folderpath, relmeshpath, relmaterialpath)

            # Ensure the object is spawned in the correct place
            position = "Vector3(" + str(obj.location.x) + ", " + str(obj.location.z) + ", " + str(-obj.location.y) + ")"
            scale = "Vector3(" + str(obj.scale.x) + ", " + str(obj.scale.z) + ", " + str(obj.scale.y) + ")"
            orientation = obj.rotation_euler.to_quaternion()

            orientation = "Quaternion(" + str(orientation[1]) + ", " + str(orientation[3]) + ", " + str(-orientation[2]) + ", " + str(orientation[0]) + ")"

            levelout.write(luatab + "local location = " + position + "\n")
            levelout.write(luatab + "if offset ~= nil then\n")
            levelout.write(luatab + luatab + "location = location + offset\n")
            levelout.write(luatab + "end\n")
            levelout.write(luatab + "Script.spawn_prefab(\"" + os.path.splitext(relprefabpath)[0] + "\", location" + ", " + orientation + ", " + scale + ")\n")

    # Finish level file
    levelout.write("end")
    levelout.close()

    return {'FINISHED'}
...
#+END_SRC

All the user has to do to spawn all these prefabs in the world is include the
created .lua file in their boot script and call the appropriate method. For
example:

#+NAME: boot.lua
#+BEGIN_SRC lua
require 'GymProgressBackUp8'

function preinit()
    ...
    GymProgressBackUp8()
    ...
end
#+END_SRC

Will spawn the entire gym scene in the game.

*** The affordance plugin

Affordances (for those objects that have them) are also exported using the
Blender export script. However, Blender does not natively have any concept of
affordances for objects. We added this ability to Blender using the Python
scripting API.

We created a field that allows users to add affordances and their value for each
object in the world. This is pictured below:

[[./affordances.png]]

[[./affordancesClose.png]]

These values were then included in the export script.

*** The rigid body plugin

Blender does have the concept of rigid bodies natively, but not necessarily for
multiple collisions shapes per rigid body, each with their own mass and inertia
tensors. We also needed to add this concept to Blender ourselves.

The result is pictured below:

[[./rigidbody.png]]

[[./rigidbodyClose.png]]

These values were then included in the export script.
