(setq org-babel-exp-code-template
         (concat "\n=%name=:\n"
              org-babel-exp-code-template)
               )
* Physics Explanation - The Plastics

** Basis

We used Ian Millington's 'cyclone' physics engine as a basis for our physics
engine. His book 'Game Physics Engine Development' was a great help to us.

** PhysicsWorld/Physics system interface

To keep the physics engine separate from other components of the engine, we
created the 'Physics' system. The Physics system acts as the glue between the
physics engine and the game engine. The Physics system translates messages
received from other systems into the appropriate method calls on the
PhysicsWorld class. For example, if the Physics system receives a message asking
it to create an entity with a physics component, the Physics system will create
the appropriate RigidBody, collision shapes and add it to the PhysicsWorld:

#+NAME: Physics.cpp
#+BEGIN_SRC c++
void Physics::CreatePhysicsComponent(Entity entity, const char *componentData)
{
    ...

        // Create rigid body component
        ds_phys::RigidBody *body = new ds_phys::RigidBody();

            ...

                    // Create box
                    auto *box = new ds_phys::CollisionBox();
                    box->halfSize = dimensions;
                    box->body = body;
                    box->offset =
                        ds_math::Matrix4::CreateTranslationMatrix(offsets[i]);

                    body->addCollisionPrimitive(box);

                    m_physicsWorld.addCollisionPrimitive(
                        std::unique_ptr<ds_phys::CollisionPrimitive>(box));

        ...

            phys = m_physicsComponentManager->CreateComponentForEntity(entity);
            m_physicsComponentManager->SetRigidBody(phys, body);

            ...

                body->setMass(totalMass);

                ...

                body->setInertiaTensor(compositeInertiaTensor);
                body->setCenterOfMassLocalSpace(centerOfMass);

            ...

            m_physicsWorld.addForceGenerator(body, m_gravityFg);
            m_physicsWorld.addRigidBody(body);

    ...
}
#+END_SRC

The Physics system is also responsible for updating the PhysicsWorld each frame:

#+NAME: Physics.cpp
#+BEGIN_SRC c++
void Physics::Update(float deltaTime)
{
    UpdateRigidBodyTransforms();

    ProcessEvents(&m_messagesReceived);

    if (deltaTime > 0.0f)
    {
        m_physicsWorld.startFrame();

        m_physicsWorld.stepSimulation(deltaTime);

        PropagateTransform();
    }

    m_messagesReceived.Clear();
}
#+END_SRC

** Applying forces

Force generators are the primary tool we use to apply forces to a RigidBody.
Just like in the cyclone engine, a ForceRegistry class is used to associate
force generators (classes inheriting from the IForceGenerator interface) with
rigid bodies. Until this association is removed, the ForceRegistry will loop
through each RigidBody/ForceGenerator pair and apply the forces from the
ForceGenerator to the RigidBody:


#+NAME: ForceGenerator.h
#+BEGIN_SRC c++
void ForceRegistry::updateForces(ds_math::scalar duration)
{
    ...

    // For each force registration
    std::for_each(m_registrations.begin(), m_registrations.end(),
                  [&](const ForceRegistration &reg) {
                      // Apply forces from force generator (fg) to the rigid
                      // body
                      reg.fg->updateForce(reg.body, duration);
                  });
}
#+END_SRC

However, we found that we needed a way to apply forces to a RigidBody for a
duration of time. To achieve this in the design of the cyclone engine, you would
need to explicitly remove the force generator/rigid body association using the
the 'ForceRegistry::remove()' method when you wanted the force generator to stop
applying forces. Rather than do this, we extended the concepts found in the
cyclone engine. Force generators are supplied to the ForceRegisty as a
'shared pointer':


#+NAME: ForceGenerator.cpp
#+BEGIN_SRC c++
void ForceRegistry::add(RigidBody *body,
                        const std::shared_ptr<IForceGenerator> &fg)
#+END_SRC

This gives the ForceRegistry shared owenership over the force generator
instance. To complement this, we added a 'isDone()' method to the
IForceGenerator interface:

#+NAME: ForceGenerator.h
#+BEGIN_SRC c++
class IForceGenerator
{
public:
    /**
     * Update the force applied to the given rigid body.
     *
     * @param   body       RigidBody *, body to apply forces to.
     * @param   duration   ds_math::scalar, time between frames.
     */
    virtual void updateForce(RigidBody *body, ds_math::scalar duration) = 0;

    /**
     * Returns true if the force generator has finished applying forces, false
     * otherwise.
     *
     * Note: this is used to determine if the force generator can be removed
     * from the ForceRegistry.
     *
     * @return   bool, true if force generator has finished applying forces and
     * false otherwise.
     */
    virtual bool isDone() const = 0;
};
#+END_SRC

With these two things, the ForceRegistry can remove a force generator/rigid body
when a force generator reports it has finished applying forces. Since the force
generator is supplied as a 'shared pointer' (giving it shared ownership), it can
dispose of the pointer without having to explicitly free any memory and without
the risk of freeing a force generator someone else might still be using. This
behaviour of the ForceRegistry is shown below:

#+NAME: ForceGenerator.cpp
#+BEGIN_SRC c++
void ForceRegistry::removeUnused()
{
    for (unsigned int i = 0; i < m_registrations.size(); ++i)
    {
        // Remove force generators which are finished
        if (m_registrations[i].fg->isDone())
        {
            // Swap this element with last to prevent holes
            m_registrations[i] = m_registrations[m_registrations.size() - 1];
            // Remove last element (which has now been copied)
            m_registrations.pop_back();
        }
    }
}
#+END_SRC

#+NAME: ForceGenerator.cpp
#+BEGIN_SRC c++
void ForceRegistry::updateForces(ds_math::scalar duration)
{
    // Clear unused force registrations
    removeUnused();

    // For each force registration
    std::for_each(m_registrations.begin(), m_registrations.end(),
                  [&](const ForceRegistration &reg) {
                      // Apply forces from force generator (fg) to the rigid
                      // body
                      reg.fg->updateForce(reg.body, duration);
                  });
}
#+END_SRC

An example of this behaviour in use is the 'ImpulseGenerator' class. The
ImpulseGenerator applies a force once and then immediately signals that it is
done:


#+NAME: ForceGenerator.cpp
#+BEGIN_SRC c++
void ImpulseGenerator::updateForce(RigidBody *body, ds_math::scalar duration)
{
    // Apply impulse
    switch (m_impulse.coordinateSpace)
    {
    case PointCoordinateSpace::None:
        body->addForce(m_impulse.force);
        break;
    case PointCoordinateSpace::World:
        body->addForceAtPoint(m_impulse.force, m_impulse.point);
        break;
    case PointCoordinateSpace::Local:
        body->addForceAtBodyPoint(m_impulse.force, m_impulse.point);
        break;
    default:
        body->addForce(m_impulse.force);
        break;
    }

    // Now that force has been applied, done
    m_isDone = true;
}
#+END_SRC

We use the impulse generator to apply forces to a rigid body from Lua:

#+NAME: LuaMathAPI.cpp
#+BEGIN_SRC c++
  static int l_RigidBodyAddForce(lua_State *L)
  {
          ...
              std::shared_ptr<ds_phys::ImpulseGenerator> impulse(
                  new ds_phys::ImpulseGenerator());
              impulse->addImpulse(*force);
              p->AddForceGenerator(*entity, impulse);
          ...
  }
#+END_SRC

This 'fire and forget' method is very convenient. Not only that, we can be
confident that memory associated with the ImpulseGenerator is freed after it has
finished applying forces.

** Polymorphic collision shapes

The collision shapes we use in the physics engine are polymoprhic. This allows
us to define certain shared behavours between different collisions shapes and
to safely store and access them in a well-defined manner.

#+NAME: CollisionFine.h
#+BEGIN_SRC c++
class CollisionPrimitive
{

public:
    /**
    * This class exists to help the collision detector
    * and intersection routines, so they should have
    * access to its data.
    */
    friend class IntersectionTests;
    friend class CollisionDetector;

    /**
    * The rigid body that is represented by this primitive.
    */
    RigidBody *body;

    /**
    * The offset of this primitive from the given rigid body.
    */
    ds_math::Matrix4 offset;

    CollisionPrimitive();
    virtual ~CollisionPrimitive() {}

    /**
    * Calculates the internals for the primitive.
    */
    void calculateInternals();

    /**
    * This is a convenience function to allow access to the
    * axis vectors in the transform for this primitive.
    */
    ds_math::Vector3 getAxis(unsigned index) const
    {
        return transform[index];
    }

    /**
    * Returns the resultant transform of the primitive, calculated from
    * the combined offset of the primitive and the transform
    * (orientation + position) of the rigid body to which it is
    * attached.
    */
    const ds_math::Matrix4 &getTransform() const
    {
        return transform;
    }

protected:
    /**
    * The resultant transform of the primitive. This is
    * calculated by combining the offset of the primitive
    * with the transform of the rigid body.
    */
    ds_math::Matrix4 transform;


}; // end class CollisionPrimitive
#+END_SRC

As it currently stands the polymorphic collision shape system isn't being
utilised to it's full ability. Rather than having the collision shapes providing
the neccesary information to generate contacts through an abstract set of
methods defined in the base class, the current implementation needs to use RTTI
to figure which contact generation method to use for any two given shapes.

#+NAME: PhysicsWorld.cpp
#+BEGIN_SRC c++
if (CollisionBox *b0Ptr = dynamic_cast<CollisionBox *>(b0)) {
    if (CollisionBox *b1Ptr = dynamic_cast<CollisionBox *>(b1)) {
        return CollisionDetector::boxAndBox(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionSphere *b1Ptr = dynamic_cast<CollisionSphere *>(b1))
    {
        return CollisionDetector::boxAndSphere(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionPlane *b1Ptr = dynamic_cast<CollisionPlane *>(b1))
    {
        return CollisionDetector::boxAndHalfSpace(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionCapsule *b1Ptr = dynamic_cast<CollisionCapsule *>(b1))
    {
        return CollisionDetector::capsuleAndBox(*b1Ptr, *b0Ptr, &data);
    }
}
else if (CollisionSphere *b0Ptr = dynamic_cast<CollisionSphere *>(b0))
{
    if (CollisionBox *b1Ptr = dynamic_cast<CollisionBox *>(b1))
    {
        return CollisionDetector::boxAndSphere(*b1Ptr, *b0Ptr, &data);
    }
    else if (CollisionSphere *b1Ptr = dynamic_cast<CollisionSphere *>(b1))
    {
        return CollisionDetector::sphereAndSphere(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionPlane *b1Ptr = dynamic_cast<CollisionPlane *>(b1))
    {
        return CollisionDetector::sphereAndHalfSpace(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionCapsule *b1Ptr = dynamic_cast<CollisionCapsule *>(b1))
    {
        return CollisionDetector::capsuleAndSphere(*b1Ptr, *b0Ptr, &data);
    }
}
else if (CollisionPlane *b0Ptr = dynamic_cast<CollisionPlane *>(b0))
{
    if (CollisionBox *b1Ptr = dynamic_cast<CollisionBox *>(b1))
    {
        return CollisionDetector::boxAndHalfSpace(*b1Ptr, *b0Ptr, &data);
    }
    else if (CollisionSphere *b1Ptr = dynamic_cast<CollisionSphere *>(b1))
    {
        return CollisionDetector::sphereAndHalfSpace(*b1Ptr, *b0Ptr, &data);
    }
    else if (/*CollisionPlane *b1Ptr = */ dynamic_cast<CollisionPlane *>(
        b1))
    {
        // Skip
    }
    else if (CollisionCapsule *b1Ptr = dynamic_cast<CollisionCapsule *>(b1))
    {
        return CollisionDetector::capsuleAndHalfSpace(*b1Ptr, *b0Ptr,
                                                      &data);
    }
}
else if (CollisionCapsule *b0Ptr = dynamic_cast<CollisionCapsule *>(b0))
{
    if (CollisionBox *b1Ptr = dynamic_cast<CollisionBox *>(b1))
    {
        return CollisionDetector::capsuleAndBox(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionSphere *b1Ptr = dynamic_cast<CollisionSphere *>(b1))
    {
        return CollisionDetector::capsuleAndSphere(*b0Ptr, *b1Ptr, &data);
    }
    else if (CollisionPlane *b1Ptr = dynamic_cast<CollisionPlane *>(b1))
    {
        return CollisionDetector::capsuleAndHalfSpace(*b0Ptr, *b1Ptr,
                                                      &data);
    }
    else if (CollisionCapsule *b1Ptr = dynamic_cast<CollisionCapsule *>(b1))
    {
        return CollisionDetector::capsuleAndCapsule(*b0Ptr, *b1Ptr, &data);
    }
}
#+END_SRC

The advantage with the above is that each method can specifically tailor for and
provide an optimised implementation for each pair of shapes for contact
genration. The downside is that RTTI needs to be performed which can be quite
expensive depending on the compiler and the manner in which it's used, it
requires maintaining a function with n^2 if statements to call the correct
function, or to write a system using RTTI to handle that more dynamically.

Ideally, a lot of the contact generation code would be refactored into the base
shape class to allow for a polymophic collision solver whilst not disallowing
optimised solvers for specific pairs. This would help balance out maintaing a
large set of RTTI-based if statements but without completely sacrificing the
possible speed increase from tailored implementations. This is what was
originally planned, however, it never came to fruition.

All collision shapes however the following set of features:
    + An offset that is applied to the transformation of the owning rigid body.
    Which allows the composition of multiple shapes into a more complex body or
    an asymetric body.
    + A pointer to the owning rigid body. This allows contact shapes to be
    stored seperately from rigid bodies, or to be unowned. It also means that
    contact generation can be ignorant of rigidbodies nor do they need to be
    amalgamated.
    + An update method to allows internal data to be updated as needed rather
    than on every calculation.
    + Some helper methods for geting the position and local-axises of the
    collision shape.

The primary reason for this system is to allow us to realistically approximate
complex 3D rigid bodies using very simple collision detection algoithims.

** Physics Resolution

*** General Method

We implemented an iterative impulse-based solver. An iterative solver loops
through a list of contacts and attempts to solve the one with the greatest
penetration. After solving it, it adjusts any dependant contacts, and then
iterates again up to a certain limit or until all contacts are solved.

Here's the high level algorithim:
    + Gather Contacts
    + For all contacts
        + Precalculate certain data (change in speed etc.)
    + Repeat until no penetrations are left or until X attempts
        + Find largest penetration
        + Resolve penetration
        + Update penetrations
    + Repeat until no velocity changes meet a threshold or until Y attempts
        + Find largest potencial velocity change
        + Resolve velocity change
        + Update velocity changes

This has the advantage that we can spread the solving of contacts across
multiple frames if we so desire but introduces ordering problems as the order
of resolution may affect the outcome of the simulation. It also has the problem
of being discrete rather than continuous which introduces issues such as
tunneling (objects going through one another). We implemented infinite-sized
planes to combat this issue as it's impossible to tunnel through them, allowing
the play area to be fully bounded if desired.

*** Special Note

The majority of collision calulations take place in "collision space". In this
space the collision normal is mapped to the x-axis with the other two axies
being perpendicular. This is to allow the precalulation of common data sets and
to simplify calculations involving the collision normal.

Allowing us to simplify equations involving th contact normal in many cases.

*** Position Correction

Since our collision system is discrete, we need to correct the position of
objects when they're detected as penetration occurs.　A naive implmentation
would just move the object along the collision normal far enough to resolve the
penitration. However, this is incorrect. The penitation depth is represents an
amount of energy, that would otherwise be lost if not corrected propperly by
changing both the distance of the object from the edge and the orientation of
the object. This results in a more realistic collision result by propperly
conserving and applying energy.

The high level of the algorithim we used for this was:
    + For each body in the collision
        + Calculate the seperate and total linear and angular intertia
            + We convert angular intertia around the collision normal into 'linear'
            intertia frictionessly, as we apply friction later to get a more
            accurate result.
            + This gives us an upper limit to how much energy we can use and a
            ratio between linear and rotational energy
        + Calculate how much to move linearly and angularly based on the total
          inertia and the ratio.
          + We then also limit the anguar change to prevent things from rolling
          around like a coin too often or constantly flipping over. We
          componsate the linear move with the energy lost from the angular
          movement cap by adding it to the linear movement.
        + Calculate how far to actually rotate given the amount of energy.
        + Calulate how far to actually move linearly given the amount of energy
        + Apply the linear movement
        + Apply the angular movement
        + If the body isn't sleeping, then
            + Recalculate the dependant data

It's worth noting that angular correction is not taken into account when
resolving penitration depth as it would require recalculating the contact, which
is too expensive to perform given the number of possible contacts pairs. This is
another reason why angular change is limited, as cumulative angular corrections
can result in over-turning an object.

*** Linear/Angular Velocity change

Once the positions have been corrected we need correct velocities to be
consistant with the physical system we're simulating.

Bellow is the high-level calculation for the impulse force:
    + Calculate the total amount of acceleration done in the frame along the
    collision normal.
    + Drop the resitution calculation for impacts less than a certain total
    velocity.
    + Calculate the relative velocity of seperation, ignoring the acceleration
    during that frame (not realitic, but in a simulation like this getting the
    correct acceleration)
    + Calulate the total energy from the resulting collision as a desired change
    in velocity

#+NAME: Contacts.cpp
#+BEGIN_SRC c++

const static scalar velocityLimit = 0.25;

scalar accelVel = 0;

for (int i = 0; i < 2; i++)
{
    if ((body[i]) && (body[i]->getAwake()))
    {
        accelVel +=
            Vector3::Dot(body[i]->getLastFrameAcceleration() * duration,
                         contactNormal) *
            ((i % 2) ? -1 : 1);
    }
}

scalar boundedResitution = restitution;
if (fabs(m_contactVelocity.x) < velocityLimit)
{
    boundedResitution = 0.0;
}

m_desiredDeltaVelocity =
    -m_contactVelocity.x - boundedResitution * (m_contactVelocity.x - accelVel);


#+END_SRC

We use the frictionless collision impulse calculation to calulate the
frictionless impulse. The top half of the formula, the desired change in
velocity is calulcated in the section above:
    + Calculate the linear and angular inertia of each body including the
    momentum along the collision normal.
    + Add the inertia of each object in the collision together
    + If the result is 0
        + return a force of 0
        + Otherwise, divide the desired change in velocity by the inertia to get
        the frictionless impulse and return.

#+NAME: Contacts.cpp
#+BEGIN_SRC c++
// Calculate the change in world-space velocity in for an impulse along the contact normal.
Vector3 deltaVelWorld =
    Vector3::Cross(m_relativeContactPosition[0], contactNormal);
deltaVelWorld = inverseInertiaTensor[0] * deltaVelWorld;
deltaVelWorld = Vector3::Cross(deltaVelWorld, m_relativeContactPosition[0]);

// Work out the change in velocity in contact coordiantes.
scalar deltaVelocity = Vector3::Dot(deltaVelWorld, contactNormal);

// Add the linear component of velocity change
deltaVelocity += body[0]->getInverseMass();

// Check if we need to the second body's data
if (body[1])
{
    // Go through the same transformation sequence again
    Vector3 deltaVelWorld =
        Vector3::Cross(m_relativeContactPosition[1], contactNormal);
    deltaVelWorld = inverseInertiaTensor[1] * deltaVelWorld;
    deltaVelWorld =
        Vector3::Cross(deltaVelWorld, m_relativeContactPosition[1]);

    // Add the change in velocity due to rotation
    deltaVelocity += Vector3::Dot(deltaVelWorld, contactNormal);

    // Add the change in velocity due to linear motion
    deltaVelocity += body[1]->getInverseMass();
}

if (deltaVelocity == 0)
    return Vector3(0, 0, 0);
else
    return Vector3(m_desiredDeltaVelocity / deltaVelocity, 0, 0);
#+END_SRC

It should be noted that the inpulse returned is in contact collison space as to
remain compatible with how friction-based impulse is calculated.

The friction-based inpule calulation is a little hard to explain as it
implements ansiotropic friction. The rough gist of the high level arlgorthim is:
    + Calculate angular and linear veloicty changes seperately
    + Calculate a matrix to transform impulses based on the velocity and angular
    changes in contact space.
    + Calculate ansiotropic friction forces that oppose the rotation and linear
    movement in directions other than the contact normal.
    + Apply the friction to the angular and linear velocity changes.

#+NAME: Contacts.cpp
#+BEGIN_SRC c++
scalar totalInvMass = body[0]->getInverseMass();
Matrix3 impulseToTorque =
    calculateSkewSymmetricMatrix(m_relativeContactPosition[0]);
Matrix3 deltaWorldVel =
    -1 * ((impulseToTorque * inverseInertiaTensor[0]) * impulseToTorque);

if (body[1])
{
    Matrix3 impulseToTorque2 =
        calculateSkewSymmetricMatrix(m_relativeContactPosition[1]);
    deltaWorldVel += -1 * ((impulseToTorque2 * inverseInertiaTensor[1]) *
                           impulseToTorque2);
    totalInvMass += body[1]->getInverseMass();
}

// Convert worl velocity to contact-space velocity.
Matrix3 deltaVelocity =
    (Matrix3::Transpose(m_contactToWorld) * deltaWorldVel) * m_contactToWorld;

// Apply linear velocity change
deltaVelocity.data[0][0] += totalInvMass;
deltaVelocity.data[1][1] += totalInvMass;
deltaVelocity.data[2][2] += totalInvMass;

// Invert to get the impulse needed per unit of velocity
Matrix3 impulseMatrix = Matrix3::Inverse(deltaVelocity);

// Find the target velocities to kill
Vector3 velKill(m_desiredDeltaVelocity, -m_contactVelocity.y,
                -m_contactVelocity.z);

// Find the impulse to kill target velocities
Vector3 impulseContact = impulseMatrix * velKill;

// Check for exceeding friction
scalar planarImpulse = sqrt(impulseContact.y * impulseContact.y +
                            impulseContact.z * impulseContact.z);

if (planarImpulse > impulseContact.x * friction)
{
    // We need to use dynamic friction
    impulseContact.y /= planarImpulse;
    impulseContact.z /= planarImpulse;

    impulseContact.x = deltaVelocity[0][0] +
                       deltaVelocity[0][1] * friction * impulseContact.y +
                       deltaVelocity[0][2] * friction * impulseContact.z;
    impulseContact.x = m_desiredDeltaVelocity / impulseContact.x;
    impulseContact.y *= friction * impulseContact.x;
    impulseContact.z *= friction * impulseContact.x;
}

return impulseContact;
#+END_SRC

This results in friction effectively being applied as a planar force
perpendicular to the collision normal, resiting certain kinds of movements and
causing things to pivot and rotate rather than slide.




.
